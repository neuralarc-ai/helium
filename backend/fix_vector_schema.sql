-- Fix vector database schema for Sentence Transformers (384 dimensions)
-- Run this in your Supabase SQL editor

-- 1. Drop existing embedding columns and recreate with correct dimensions
ALTER TABLE public.global_knowledge_base_entries DROP COLUMN IF EXISTS embedding;
ALTER TABLE public.knowledge_base_entries DROP COLUMN IF EXISTS embedding;

-- 2. Add embedding columns with correct dimensions
ALTER TABLE public.global_knowledge_base_entries ADD COLUMN embedding vector(384);
ALTER TABLE public.knowledge_base_entries ADD COLUMN embedding vector(384);

-- 3. Add comments
COMMENT ON COLUMN public.global_knowledge_base_entries.embedding IS '384-dimensional embedding vector generated by Sentence Transformers all-MiniLM-L6-v2';
COMMENT ON COLUMN public.knowledge_base_entries.embedding IS '384-dimensional embedding vector generated by Sentence Transformers all-MiniLM-L6-v2';

-- 4. Create indexes for efficient similarity search
CREATE INDEX IF NOT EXISTS idx_global_kb_embeddings ON public.global_knowledge_base_entries USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);
CREATE INDEX IF NOT EXISTS idx_kb_embeddings ON public.knowledge_base_entries USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- 5. Drop old functions
DROP FUNCTION IF EXISTS get_smart_kb_context(TEXT, INTEGER, REAL);
DROP FUNCTION IF EXISTS get_relevant_kb_context(TEXT, vector, INTEGER, FLOAT);
DROP FUNCTION IF EXISTS generate_embedding(TEXT);

-- 6. Create clean function to generate embeddings for queries
CREATE OR REPLACE FUNCTION generate_embedding(text_content TEXT)
RETURNS TABLE(embedding vector(384)) AS $$
BEGIN
    -- This function will be called by the application to generate embeddings
    -- The actual embedding generation happens in Python using Sentence Transformers
    -- This is just a placeholder for the database function
    RETURN QUERY SELECT NULL::vector(384);
END;
$$ LANGUAGE plpgsql;

-- 7. Create the smart knowledge base context function
CREATE OR REPLACE FUNCTION get_smart_kb_context(
    query_text TEXT,
    max_results INTEGER DEFAULT 5,
    similarity_threshold REAL DEFAULT 0.3
)
RETURNS TABLE(
    entry_id UUID,
    name TEXT,
    content TEXT,
    similarity REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        g.entry_id,
        g.name,
        g.content,
        (g.embedding <=> query_embedding.embedding) AS similarity
    FROM 
        global_knowledge_base_entries g,
        (SELECT embedding FROM generate_embedding(query_text)) AS query_embedding
    WHERE 
        g.embedding IS NOT NULL
        AND (g.embedding <=> query_embedding.embedding) < similarity_threshold
    ORDER BY 
        similarity ASC
    LIMIT max_results;
END;
$$ LANGUAGE plpgsql;

-- 8. Grant permissions
GRANT EXECUTE ON FUNCTION get_smart_kb_context TO authenticated, service_role;
GRANT EXECUTE ON FUNCTION generate_embedding TO authenticated, service_role;

-- 9. Verify the setup
SELECT 
    table_name,
    column_name,
    data_type,
    udt_name
FROM information_schema.columns 
WHERE table_name IN ('global_knowledge_base_entries', 'knowledge_base_entries')
AND column_name = 'embedding';

-- 10. Check if pgvector extension is available
SELECT * FROM pg_extension WHERE extname = 'vector';

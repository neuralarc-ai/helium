-- Update vector dimensions for Sentence Transformers
-- Sentence Transformers all-MiniLM-L6-v2 generates 384-dimensional vectors

-- Drop the existing embedding column
ALTER TABLE public.global_knowledge_base_entries DROP COLUMN IF EXISTS embedding;

-- Recreate with correct dimensions
ALTER TABLE public.global_knowledge_base_entries ADD COLUMN embedding vector(384);

-- Add comment
COMMENT ON COLUMN public.global_knowledge_base_entries.embedding IS '384-dimensional embedding vector generated by Sentence Transformers all-MiniLM-L6-v2';

-- Create index for vector similarity search
CREATE INDEX IF NOT EXISTS idx_global_kb_embeddings ON public.global_knowledge_base_entries USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100);

-- Update the get_smart_kb_context function to use cosine similarity
CREATE OR REPLACE FUNCTION get_smart_kb_context(
    query_text TEXT,
    max_results INTEGER DEFAULT 5,
    similarity_threshold REAL DEFAULT 0.3
)
RETURNS TABLE(
    entry_id UUID,
    name TEXT,
    content TEXT,
    similarity REAL
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        g.entry_id,
        g.name,
        g.content,
        (g.embedding <=> query_embedding.embedding) AS similarity
    FROM 
        global_knowledge_base_entries g,
        (SELECT embedding FROM generate_embedding(query_text)) AS query_embedding
    WHERE 
        g.embedding IS NOT NULL
        AND (g.embedding <=> query_embedding.embedding) < similarity_threshold
    ORDER BY 
        similarity ASC
    LIMIT max_results;
END;
$$ LANGUAGE plpgsql;

-- Create function to generate embeddings for queries
CREATE OR REPLACE FUNCTION generate_embedding(text_content TEXT)
RETURNS TABLE(embedding vector(384)) AS $$
BEGIN
    -- This function will be called by the application to generate embeddings
    -- The actual embedding generation happens in Python using Sentence Transformers
    -- This is just a placeholder for the database function
    RETURN QUERY SELECT NULL::vector(384);
END;
$$ LANGUAGE plpgsql;
